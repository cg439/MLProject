import nltk

"""Takes in a sentence and a number indicating size of n-gram
Returns a list of of n-grams, where an n-gram is a n-sized list of tuples
Throws exceptions if sentence is empty of num != 2 or num !=3 """
def getGrams(sentence, num):
	if num == 2:
		grammar = "NP: {<JJ><NN>}"
	elif num == 3:
		grammar = "NP: {<DT>?<JJ><NN>}"
	else:
		raise Exception("n-gram size must be 2 or 3.") 
	cp = nltk.RegexpParser(grammar)
	if sentence != "":
		try: 
			token = nltk.word_tokenize(sentence)
			tags = nltk.pos_tag(token)
		except:
			sentence = stripNonAscii(sentence)
			token = nltk.word_tokenize(sentence)
			tags = nltk.pos_tag(token)
		tree = cp.parse(tags)
		dupes = traverse(tree)
		return makeSet(dupes)
	else:
		raise Exception("sentence cannot be empty")
"""Traverses the tree generated by nltk chunking on the grammar"""
def traverse(tree):
	trigrams = []
	if isinstance(tree, nltk.tree.Tree): 
		if tree.label() == 'NP':
			trigrams.append(tree.leaves())	
		else:
			for t in tree.subtrees():
				if t.label() == 'NP':
					trigrams.append(t.leaves())
	return trigrams 

"""Strips non ascii bytes by replacing them with a blank space"""
def stripNonAscii(sentence):
	badChars = []
	for i in range(0, len(sentence)):
		if not(0 < ord(sentence[i]) < 127):
			badChars.append(sentence[i])
	if len(badChars) > 0:
		for b in badChars:
			sentence = sentence.replace(b, "")
	return sentence 

"""returns a set of n-grams"""
def makeSet(dupeList):
	output = []
	for d in dupeList:
		if d not in output:
			output.append(d)
	return output 

